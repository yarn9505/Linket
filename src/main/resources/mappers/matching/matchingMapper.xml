<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- matching page mapper 작성자 : 황영롱 -->
<mapper namespace="matchingMapper">

	<sql id="boardCol">
		bno,
		userId,
		btitle,
		bcontent,
		value,
		viewcnt,
		bregdate,
		isSwap
	</sql>

	<!-- 사용자가 설정한 키워드를 포함하는 게시글 목록 가져오기 -->
	<select id="keywordListSel" resultType="matchingDTO">
		SELECT
		<include refid="boardCol"></include>
		,
		(6371*acos(cos(radians(#{UserVO.lat}))*cos(radians(lat))*cos(radians(lon)
		-radians(#{UserVO.lon}))+sin(radians(#{UserVO.lat}))*sin(radians(lat))))
		AS distance,category.cateName
		FROM
		board LEFT OUTER JOIN category ON board.cateId = category.cateId
		WHERE
		board.userId != #{UserVO.userId}
		and
		((isSwap = 'N' and allowVal = 'N' and bcontent LIKE
		CONCAT('%',#{productKeywords},'%'))
		or
		(isSwap = 'N' and allowVal = 'N' and btitle LIKE
		CONCAT('%',#{productKeywords},'%')))
		ORDER BY
		bno desc, value asc, distance asc
	</select>

	<select id="countSel" resultType="int">
		select count(*)
		FROM board
		WHERE
		( isSwap = 'N' and allowVal = 'N' and bcontent LIKE
		CONCAT('%','test','%') )
		or
		( isSwap = 'N' and allowVal = 'N' and btitle LIKE
		CONCAT('%','test','%') )

	</select>

	<!-- MatchingT 에 값을 요청메시지와 함께 값을 넣어줌 -->
	<insert id="insertMatchingT">
		insert into matchingT(requester, receiver, bno,
		requestMsg,lat,lon,addr1,wantedValue)
		values(#{vo.userId},#{dto.userId},#{dto.bno},#{dto.requestMsg},#{dto.lat},#{dto.lon},#{dto.addr1},#{dto.wantedValue})
	</insert>

	<!-- 현재 로그인된 사용자 위도,경도,주소 가져오기 -->
	<select id="getAddr" resultType="UserVO">
		select lat,lon,addr1
		from usertable
		where userId = #{userId}
	</select>

	<!-- 내가 요청을 받은 게시글 리스트 확인 -->
	<select id="listMyMatch" resultType="matchingCntDTO">
		select matchingT.bno, board.btitle, board.value, count(matchingT.bno) AS
		bnoNum, ROUND(AVG(matchingT.wantedValue)) AS avgValue
		from matchingT left outer join board on matchingT.bno = board.bno
		group by matchingT.bno
		having matchingT.bno
		IN(
		select matchingT.bno
		from matchingT LEFT OUTER JOIN board ON matchingT.bno = board.bno
		where board.allowVal = 'N' and receiver=#{userId}

		)
		order by bnoNum desc, matchingT.bno desc
	</select>

	<!-- 게시글의 요청내용을 확인하는 mapper -->
	<select id="listMatchContent" resultType="matchingDTO">
		select mno,requester, requestMsg, addr1, wantedValue,
		(6371*acos(cos(radians(#{vo.lat}))*cos(radians(lat))*cos(radians(lon)
		-radians(#{vo.lon}))+sin(radians(#{vo.lat}))*sin(radians(lat))))
		AS distance
		from matchingT
		where receiver = #{vo.userId} and bno=#{bno}
		<if test='condi == "price"'>
			order by wantedValue desc, distance asc
		</if>
		<if test='condi == "distance"'>
			order by distance asc, wantedValue desc
		</if>

	</select>

	<!-- 요청비용의 평균 요청가격을 구함 -->
	<select id="avgWantedValue" resultType="int">
		select AVG(wantedValue)
		from matchingT
		where receiver = #{vo.userId} and bno=#{bno}
	</select>


	<!-- 적정가격은 희망가격>가치 인 경우, 가치>희망가격인 경우를 컨트롤러에서 판별해서 들어오면 계산한 거리와 가치를 반환해줌 -->
	<!-- 가격 : 거리 = 7:3 -->
	<select id="calcCompare" resultType="matchingDTO">
		select matchingT.*,board.bno,
		(6371*acos(cos(radians(#{vo.lat}))*cos(radians(matchingT.lat))*cos(radians(matchingT.lon)
		-radians(#{vo.lon}))+sin(radians(#{vo.lat}))*sin(radians(matchingT.lat))))
		AS distance,
		(board.value-matchingT.wantedValue) AS relValue,matchingT.requester as userId,
		ROUND(ABS(board.value-matchingT.wantedValue) * 0.7 -
		(6371*acos(cos(radians(#{vo.lat}))*cos(radians(matchingT.lat))*cos(radians(matchingT.lon)
		-radians(#{vo.lon}))+sin(radians(#{vo.lat}))*sin(radians(matchingT.lat))))
		* 0.3) AS weightValue
		from matchingT left outer join board on matchingT.bno = board.bno
		where receiver = #{vo.userId} and board.bno = (select bno from matchingT
		where mno = #{mno}) and mno=#{mno}
	</select>

	<select id="showMyBoard" resultType="TimelineDTO">
		select board.btitle as btitle,board.bcontent as bcontent,board.value as
		value,board.bregdate as bregdate, usertable.addr1 AS addr1
		from board left outer join usertable on usertable.userId = board.userId
		where usertable.userId = #{vo.userId} and board.bno = (select bno from
		matchingT where mno = #{mno})
	</select>

	<!-- mno를 가지고 bno와 sellerId를 가지고 오는 매퍼 -->
	<select id="infoForUpdate" resultType="BoardDTO">
		select board.bno as bNo,
		board.userId
		from board
		where board.bno = (select bno from matchingT
		where mno=#{mno})
	</select>

	<!-- 게시자가 원하는 요청글을 선택한 경우, mno를 받아서 allowVal을 바꾸고 sellerId에 판매자 아이디 추가 -->
	<!-- 6월 18일 데이터베이스 조금 수정, sql문도 좀 바꿈 -->
	<!-- swit 상태 : ON) 요청 , OFF)요청취소 -->
	<update id="updateAllowVal">
		update board join matchingT
		on board.bno = matchingT.bno
		set
		<if test='swit=="ON"'>
			board.allowVal='Y',
			matchingT.sellerId = #{sellerId}
		</if>
		<if test='swit=="OFF"'>
			board.allowVal='N',
			matchingT.sellerId = NULL
		</if>
		where board.bno = #{bno} and matchingT.mno=#{mno};
	</update>

	<!-- isSwap = 'N' /allowVal ='Y' 인 게시글 중에서 내 아이디를 검색 -->
	<select id="selectMyBno" resultType="matchingDTO">
		select
		matchingT.requester, matchingT.receiver,
		matchingT.bno, board.userId as userId, board.btitle as btitle,
		board.bcontent as bcontent, board.value as bcontent, board.bregdate as bregdate,
		matchingT.requestMsg, matchingT.wantedValue, matchingT.mno,
		matchingT.sellerId
		from matchingT left outer join board on
		matchingT.bno = board.bno
		where
		(board.allowVal = 'Y' and board.isSwap = 'N' and (matchingT.requester = #{userId} and
		matchingT.sellerId is not NULL ))
		or
		(board.allowVal = 'Y' and
		board.isSwap = 'N' and (matchingT.sellerId = #{userId}))

	</select>

	<!-- 나와 거래중인 사용자의 정보를 가지고 옴 -->
	<!-- matchingT의 userId(내가 거래자인경우)와 matchingT의 seller가 나인 경우(내가 판매자) 구분하여 
		상대방 정보를 가지고 온다 -->
	<!-- 어차피 웹상에서 판매자와 거래자의 자리가 정해져있기 때문에 -->
	<!-- 1) 내가 판매자인 경우 : 구매자의 정보를 가지고 옴 -->
	<!-- 2) 내가 구매자인 경우 : 판매자의 정보를 가지고 옴 -->
	<!-- 3) 내 정보를 가지고 오기 -->
	<select id="WhoAmI" resultType="UserVO">
		select userId, userName, userHp,
		rank
		from usertable
		where userId = #{userId}
	</select>


	<!-- 후기에 정보 넣어주기 -->
	<insert id="insertTranPost">
		insert into eval(userId, bno, cateId, buyerId,
		pscore)
		values(
		(select sellerId from matchingT where mno = #{mno} and
		requester = #{vo.userId}),
		(select bno from matchingT where mno=
		#{mno}),
		(select board.cateId from board left outer join matchingT on
		board.bno=matchingT.bno
		where board.bno=(select bno from matchingT where mno=#{mno}) and
		matchingT.mno = #{mno} ),
		#{vo.userId},
		1)
	</insert>

	<!-- eval에서 구매후기 정보 가지고 오기 -->
	<select id="selectEval" resultType="matchingDTO">
		select requester, sellerId,
		bno
		from matchingT
		where mno = #{mno}
	</select>

</mapper>

